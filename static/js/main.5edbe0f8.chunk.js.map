{"version":3,"sources":["utils/randomColor.js","components/card/card.component.jsx","App.js","serviceWorker.js","index.js"],"names":["randomColor","Math","floor","random","Card","quote","author","handleClick","color","id","className","style","onClick","backgroundColor","href","App","getQuote","state","this","fetch","then","response","json","data","quotesData","quotes","randomQuote","length","setState","catch","error","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iTAAMA,G,YAAc,WAMhB,MADc,OAJNC,KAAKC,MAAsB,IAAhBD,KAAKE,UAIG,IAHnBF,KAAKC,MAAsB,IAAhBD,KAAKE,UAGa,IAF7BF,KAAKC,MAAsB,IAAhBD,KAAKE,UAEuB,MCapCC,EAdF,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,YACxBC,EAAQR,IACV,OACI,yBAAKS,GAAG,aACR,yBAAKC,UAAU,QACf,wBAAIC,MAAO,CAACH,MAAOA,IAASH,GAC5B,0BAAMI,GAAG,UAAUH,GACnB,4BAAQG,GAAG,YAAYG,QAASL,EAAaI,MAAO,CAACE,gBAAiBL,IAAtE,aACA,4BAAQC,GAAG,eAAc,uBAAGK,KAAK,mCAAR,gBCuClBC,E,kDA7Cb,aAAc,IAAD,8BACX,gBA8BFR,YAAc,WACb,EAAKS,WACLhB,KA/BC,EAAKiB,MAAO,CACVZ,MAAO,GACPC,OAAQ,IAJC,E,gEAYXY,KAAKF,WACLhB,M,iCAEW,IAAD,OACVmB,MAAM,0IACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAIC,EAAaD,EAAKE,OAElBC,EAAcF,EADHvB,KAAKC,MAAMD,KAAKE,SAAWqB,EAAWG,SAErD,EAAKC,SAAS,CACZvB,MAAOqB,EAAW,MAClBpB,OAAQoB,EAAW,YAGtBG,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAQrB,IAAD,EACoBZ,KAAKD,MAAvBZ,EADF,EACEA,MAAOC,EADT,EACSA,OACf,OACE,yBAAKK,MAAO,CAAEE,gBAAiBb,MAC7B,kBAAC,EAAD,CAAMK,MAAOA,EAAOC,OAASA,EAAQC,YAAaW,KAAKX,mB,GAxC7C0B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoB,c","file":"static/js/main.5edbe0f8.chunk.js","sourcesContent":["const randomColor = () => {\n    let x = Math.floor(Math.random() * 256)\n    let y = Math.floor(Math.random() * 256)\n    let z = Math.floor(Math.random() * 256)\n  \n    let bgColor = \"rgb(\" + x + \",\" + y + \",\" + z + \")\";\n    return bgColor;\n  \n  }\n\n   \nexport { randomColor };","import React from 'react';\nimport \"./card.styles.css\";\nimport { randomColor} from '../../utils/randomColor';\n\nconst Card = ({quote, author, handleClick}) => {\n  let color = randomColor()\n    return (\n        <div id=\"quote-box\">\n        <div className=\"card\">\n        <h2 style={{color: color}}>{quote}</h2>\n        <span id=\"author\">{author}</span>\n        <button id=\"new-quote\" onClick={handleClick} style={{backgroundColor: color}}>New quote</button>\n        <button id=\"tweet-quote\"><a href=\"http://twitter.com/intent/tweet\">Tweet it</a></button>\n        </div>\n         \n      </div>)\n}\n\nexport default Card;\n\n\n","import React from 'react';\nimport './App.css';\nimport Card from \"./components/card/card.component\";\nimport {randomColor} from \"./utils/randomColor\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state= {\n      quote: '',\n      author: '',\n    }\n  }\n\n   \n\n\n  componentDidMount(){    \n    this.getQuote()\n    randomColor()\n  }\n    getQuote(){\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n    .then(response => response.json())\n    .then(data => {\n      let quotesData = data.quotes\n      let quoteNum = Math.floor(Math.random() * quotesData.length)\n      let randomQuote = quotesData[quoteNum]\n      this.setState({\n        quote: randomQuote['quote'],\n        author: randomQuote['author']\n      })\n    })\n    .catch(error => console.log(error)\n    )\n  }\n\n  handleClick = () => {\n   this.getQuote()\n   randomColor()\n  }\n  render(){\n    const { quote, author } = this.state;\n    return(           \n      <div style={{ backgroundColor: randomColor()}}>\n        <Card quote={quote} author= {author} handleClick={this.handleClick} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}